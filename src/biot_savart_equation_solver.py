import numpy as np
from scipy.constants import mu_0, pi

from src.coordinate_and_position import CoordinateSystem
from src.fields import VectorField


class BiotSavartEquationSolver:
    """
    A Biot–Savart law solver used to compute the resultant magnetic field B in 2D-space generated by a constant current
    field I (for example due to wires).
    """

    def _solve_in_cartesian_coordinate(
            self,
            electric_current: VectorField,
            delta_x: float,
            delta_y: float
    ) -> VectorField:
        """
        Solve the Biot–Savart equation to compute the magnetic field given an electric current field.

        Parameters
        ----------
        electric_current : VectorField
            A vector field I : ℝ² → ℝ³ ; (x, y) → (I_x(x, y), I_y(x, y), I_z(x, y)), where I_x(x, y), I_y(x, y) and
            I_z(x, y) are the 3 components of the electric current vector at a given point (x, y) in space. Note that
            I_z = 0 is always True in our 2D world.
        delta_x : float
            Small discretization of the x-axis.
        delta_y : float
            Small discretization of the y-axis.

        Returns
        -------
        magnetic_field : VectorField
            A vector field B : ℝ² → ℝ³ ; (x, y) → (B_x(x, y), B_y(x, y), B_z(x, y)), where B_x(x, y), B_y(x, y) and
            B_z(x, y) are the 3 components of the magnetic vector at a given point (x, y) in space. Note that
            B_x = B_y = 0 is always True in our 2D world.
        """
        I_x = electric_current.x
        I_y = electric_current.y
        N, M = I_x.shape

        B_z = np.zeros((N, M))

        coord_x = np.stack(np.nonzero(I_x), axis=1)
        coord_y = np.stack(np.nonzero(I_y), axis=1)

        # On calcule Biot Savard pour tous les courants en x
        for i, j in coord_x:
            I = I_x[i, j]

            # On itère sur toutes la grille
            for x in range(N):
                for y in range(M):
                    # Évite les divisions par 0
                    if (i, j) != (x, y):
                        B_z[x, y] += I*(y-j)*delta_x/((x-i)**2+(y-j)**2)**(3/2)

        # On calcule Biot Savard pour tous les courants en y
        for i, j in coord_y:
            I = I_y[i, j]

            # On itère sur toutes la grille
            for x in range(N):
                for y in range(M):
                    # Évite les divisions par 0
                    if (i, j) != (x, y):
                        B_z[x, y] += I*(i-x)*delta_y/((x-i)**2+(y-j)**2)**(3/2)
        # On crée une 3Darray
        B = np.dstack((np.zeros((N, M)), np.zeros((N, M)), mu_0/(4*pi)*B_z))
        return VectorField(B)
    

    def _solve_in_polar_coordinate(
            self,
            electric_current: VectorField,
            delta_r: float,
            delta_theta: float
    ) -> VectorField:
        """
        Solve the Biot–Savart equation to compute the magnetic field given an electric current field.

        Parameters
        ----------
        electric_current : VectorField
            A vector field I : ℝ² → ℝ³ ; (r, θ) → (I_r(r, θ), I_θ(r, θ), I_z(r, θ)), where I_r(r, θ), I_θ(r, θ) and
            I_z(r, θ) are the 3 components of the electric current vector at a given point (r, θ) in space. Note that
            I_z = 0 is always True in our 2D world.
        delta_r : float
            Small discretization of the r-axis.
        delta_theta : float
            Small discretization of the θ-axis.

        Returns
        -------
        magnetic_field : VectorField
            A vector field B : ℝ² → ℝ³ ; (r, θ) → (B_r(r, θ), B_θ(r, θ), B_z(r, θ)), where B_r(r, θ), B_θ(r, θ) and
            B_z(r, θ) are the 3 components of the magnetic vector at a given point (r, θ) in space. Note that
            B_r = B_θ = 0 is always True in our 2D world.
        """
        I_r = electric_current.x
        I_th = electric_current.y
        N, M = I_r.shape

        B_z = np.zeros((N, M))

        coord_r = np.stack(np.nonzero(I_r), axis=1)
        coord_th = np.stack(np.nonzero(I_th), axis=1)

        # On calcule Biot Savard pour tous les courants en r
        for i, j in coord_r:
            I = I_r[(i, j)]

            # On itère sur toutes la grille
            for r in range(N):
                for th in range(M):
                    # Évite les divisions par 0
                    if (i, j) != (r, th):
                        B_z[(r, th)] += I*(th-j)*delta_r/((r-i)**2+(th-j)**2)**(3/2)

        # On calcule Biot Savard pour tous les courants en theta
        for i, j in coord_th:
            I = I_th[(i, j)]

            # On itère sur toutes la grille
            for r in range(N):
                for th in range(M):
                    # Évite les divisions par 0
                    if (i, j) != (r, th):
                        B_z[(r, th)] += I*(i-r)*i*delta_theta/((r-i)**2+(th-j)**2)**(3/2)
        # On crée une 3Darray
        B = np.dstack((np.zeros((N, M)), np.zeros((N, M)), mu_0/(4*pi)*B_z))
        return VectorField(B)

    def solve(
            self,
            electric_current: VectorField,
            coordinate_system: CoordinateSystem,
            delta_q1: float,
            delta_q2: float
    ) -> VectorField:
        """
        Solve the Biot–Savart equation to compute the magnetic field given an electric current field.

        Parameters
        ----------
        electric_current : VectorField
            A vector field I : ℝ² → ℝ³ representing currents in the 2D world.
        coordinate_system : CoordinateSystem
            Coordinate system.
        delta_q1 : float
            Small discretization of the first axis.
        delta_q2 : float
            Small discretization of the second axis.

        Returns
        -------
        magnetic_field : VectorField
            A vector field B : ℝ² → ℝ³ representing the magnetic field in the 2D world.
        """
        if coordinate_system == CoordinateSystem.CARTESIAN:
            return self._solve_in_cartesian_coordinate(electric_current, delta_q1, delta_q2)
        elif coordinate_system == CoordinateSystem.POLAR:
            return self._solve_in_polar_coordinate(electric_current, delta_q1, delta_q2)
        else:
            raise NotImplementedError("Only the cartesian and polar coordinates solvers are implemented.")
